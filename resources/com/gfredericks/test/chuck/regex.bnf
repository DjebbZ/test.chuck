Regex = BCC

BCC = <'['> BCCIntersection <'&&'>? <']'>
(* using + with '&&' allows arbitrary even numbers of ampersands, which
   is how the jvm parses it *)
BCCIntersection = BCCUnionLeft (<BCCEvenAmpersands> BCCUnionNonLeft ) *
BCCUnionLeft = (BCCNegation BCCElemHardLeft | !'^' BCCElemHardLeft) BCCElemNonLeft *
BCCUnionNonLeft = BCCElemLeft BCCElemNonLeft *
BCCNegation = '^'
BCCEvenAmpersands = ('&&' + !'&')
BCCOddAmpersands = '&' <'&&'>* ! '&'

(* The optional '&&' here cover some quirky NOOP edge cases *)
BCCElemHardLeft = !'&&&' <'&&'> ? BCCElemBase | (']' ! ('-' BCCRangeRightable)) | BCCRangeWithBracket
BCCElemLeft = BCCElemBase
BCCElemNonLeft = BCCElemBase


BCCElemBase = BCCCharNonRange | SpecialCharClass | UnicodeCharacterClass | BCCRange | BCC
BCCRangeRightable = BCCCharEndRange | SpecialCharClass | UnicodeCharacterClass | '&'
BCCRange = BCCChar <'-'> BCCCharEndRange
BCCRangeWithBracket = <']-'> BCCCharEndRange
BCCCharNonRange = BCCChar ! ('-' BCCRangeRightable)
BCCChar = BCCPlainChar | EscapedChar | BCCOddAmpersands
BCCCharEndRange = BCCPlainChar | EscapedChar | BCCAmpersandEndRange
BCCAmpersandEndRange = '&' <(!'&' | BCCOddAmpersands)>
BCCPlainChar = #"[^\]\[&\\]"
(* only match an odd number of ampersands whatever *)
(* This is problematic because re-pattern won't take repeated ampersands in the HardLeft position *)
BCCDash = '-'


(** BASE CHARACTER STUFFS **)

EscapedChar = OctalChar | HexChar | BasicEscapedChar | NormalSlashedCharacters | ControlChar | WhatDoesThisMean
OctalChar = <'\\0'> (OctalDigits1 | OctalDigits2 | OctalDigits3)
OctalDigits1 = #"[0-7]" ! #"[0-7]"
OctalDigits2 = (#"[0-3][0-7]" ! #"[0-7]") | #"[4-7][0-7]"
OctalDigits3 = #"[0-3][0-7]{2}"
HexChar = ShortHexChar | MediumHexChar | LongHexChar
ShortHexChar = <'\\x'> #'[0-9a-fA-F]{2}'
MediumHexChar = <'\\u'> #'[0-9a-fA-F]{4}'
LongHexChar = <'\\x{'> #'[0-9a-fA-F]+' <'}'>
BasicEscapedChar = <'\\'> #"[^a-zA-Z0-9]"

(* probably missing something here *)
SpecialCharClass = #"\\[wWsSdD]"
(* Gotta figure out what these mean *)
UnicodeCharacterClass = <'\\'> #'[pP]' (#"[CLMNPSZ]" | #"\{[a-zA-Z]+\}")

NormalSlashedCharacters = #"\\[tnrfae]"
WhatDoesThisMean = '\\v'
ControlChar = <'\\c'> (<'\\'> #"(?s)." | ! '\\' #"(?s).")
