(* I think we need a special AlternationWithAllowedQ *)
Regex = AlternationWithAllowedQ

AlternationWithAllowedQ = Concatenation ('|' Concatenation) * PartialQE ?

Alternation = Concatenation ('|' Concatenation) *

Concatenation = SuffixedExpr *

SuffixedExpr = SingleExpr Suffix ?
(* Seems a CurlyRepetition can appear by itself; gotta fix some ambiguity here. *)
SingleExpr = BaseExpr | CurlyRepetition | '(' Alternation ')' | Flag
Suffix = ('?' | '+' | '*' | CurlyRepetition ) Quantifier ?
CurlyRepetition = <'{'> #"\d+" (',' #"\d+" ?) ? <'}'>
Quantifier = '?' | '+'
BaseExpr = CharExpr | LiteralChar | Anchor | BackReference
Anchor = '^' | '$' | '\\' #"[bBAGZz]"
LiteralChar = PlainChar | NormalSlashedCharacters | BasicEscapedChar | ControlChar

(* this will be hard -- will require counting in the analyzer to figure
   out where the number stops and numberic literals begin *)
BackReference = <'\\'> #"[1-9][0-9]*"

(* What are these? *)
ControlChar = #"\\c."

PlainChar = #"[^.|\\+*$^\[(){?]"
CharExpr = Dot | SpecialCharClass | UnicodeCharacterClass | BCC
Dot = '.'

PartialQE = '\\Q' AnyCharButSlashE * '\\' ?
QE = '\\Q' AnyCharButSlashE * '\\E'
AnyCharButSlashE = #"[^\\]" | #"\\[^E]"

(** BRACKETED CHARACTER CLASSES (AKA BCC) **)
(** (which are more complicated than you thought they were) **)

BCC = <'['> BCCIntersection <']'>
(* using + with '&&' allows arbitrary even numbers of ampersands, which
   is how the jvm parses it *)
BCCIntersection = BCCUnionLeft (('&&' + BCCUnionCenter ) * '&&' + BCCUnionRight) ?
(* TODO: is this ambiguous wrt leading ^? *)
BCCUnionLeft = (BCCNegation BCCElemHardLeft | !'^' BCCElemHardLeft) BCCElemNonLeft *
BCCUnionRight = BCCElemLeft BCCElemNonLeft
BCCUnionCenter = BCCElemLeft BCCElemNonLeft
BCCNegation = '^'

BCCElemHardLeft = BCCElemBase | (']' ! ('-' BCCRangeRightable)) | BCCRangeWithDash | BCCRangeWithBracket
BCCElemLeft = BCCElemBase | BCCRangeWithDash
BCCElemNonLeft = BCCElemBase


BCCElemBase = BCCCharNonRange | SpecialCharClass | UnicodeCharacterClass | BCCRange | BCC
BCCRangeRightable = BCCChar | SpecialCharClass | UnicodeCharacterClass | '&'
BCCRange = BCCChar <'-'> BCCChar
BCCRangeWithDash = '--' BCCChar
BCCRangeWithBracket = ']-' BCCChar
BCCCharNonRange = BCCChar ! ('-' BCCRangeRightable)
BCCChar = BCCPlainChar | BasicEscapedChar | NormalSlashedCharacters | BCCAmpersand
BCCPlainChar = #"[^\]\[&\\]"
(* only match an odd number of ampersands whatever *)
BCCAmpersand = '&' <('&&' *)> !'&'
BCCDash = '-'


(** BASE CHARACTER STUFFS **)

OctalChar = '\\0' (OctalDigits1 | OctalDigits2 | OctalDigits3)
OctalDigits1 = #"[0-7]" ! #"[0-7]"
OctalDigits2 = (#"[0-3][0-7]" ! #"[0-7]") | #"[4-7][0-7]"
OctalDigits3 = #"[0-3][0-7]{2}"
BasicEscapedChar = <'\\'> #"[^a-zA-Z0-9]"

(* probably missing something here *)
SpecialCharClass = #"\\[wWsSdD]"
(* Gotta figure out what these mean *)
UnicodeCharacterClass = #"\\[pP][CLMNPSZ]"

NormalSlashedCharacters = #"\\[tnrfae]" | WhatDoesThisMean
WhatDoesThisMean = '\\v'

(** FLAGS **)
Flag = UnknownFlag

(* no idea what this is; seems a NOOP *)
UnknownFlag = '(?)'