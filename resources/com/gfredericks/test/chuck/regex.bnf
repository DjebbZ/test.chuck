Regex = Alternation

Alternation = Concatenation (<'|'> Concatenation) *

Concatenation = DanglingCurlyRepetitions SuffixedExpr *

DanglingCurlyRepetitions = (CurlyRepetition Quantifier ?) *

SuffixedExpr = SingleExpr Suffix ?
SingleExpr = BaseExpr | ParenthesizedExpr
ParenthesizedExpr = <'('> GroupFlags ? Alternation <')'>
Suffix = (Optional | Positive | NonNegative | CurlyRepetition ) Quantifier ? DanglingCurlyRepetitions
Optional = <'?'>
Positive = <'+'>
NonNegative = <'*'>
CurlyRepetition = <'{'> #"\d+" (',' #"\d+" ?) ? <'}'>
Quantifier = '?' | '+'
BaseExpr = CharExpr | LiteralChar | Anchor | BackReference
Anchor = '^' | '$' | '\\' #"[bBAGZz]"
LiteralChar = PlainChar | EscapedChar

(* this will be hard -- will require counting in the analyzer to figure
   out where the number stops and numberic literals begin *)
BackReference = <'\\'> #"[1-9][0-9]*"

PlainChar = #"[^.|\\+*$^\[(){?]"
CharExpr = Dot | SpecialCharClass | UnicodeCharacterClass | BCC
Dot = '.'

(** BRACKETED CHARACTER CLASSES (AKA BCC) **)
(** (which are more complicated than you thought they were) **)

BCC = <'['> BCCIntersection <'&&'>? <']'>
(* using + with '&&' allows arbitrary even numbers of ampersands, which
   is how the jvm parses it *)
BCCIntersection = BCCUnionLeft ((<BCCEvenAmpersands> BCCUnionCenter ) * <BCCEvenAmpersands> BCCUnionRight) ?
BCCUnionLeft = (BCCNegation BCCElemHardLeft | !'^' BCCElemHardLeft) BCCElemNonLeft *
BCCUnionRight = BCCElemLeft BCCElemNonLeft *
BCCUnionCenter = BCCElemLeft BCCElemNonLeft *
BCCNegation = '^'
BCCEvenAmpersands = ('&&' + !'&')
BCCOddAmpersands = '&' <'&&'>* ! '&'

(* The optional '&&' here cover some quirky NOOP edge cases *)
BCCElemHardLeft = !'&&&' <'&&'> ? BCCElemBase | (']' ! ('-' BCCRangeRightable)) | BCCRangeWithBracket
BCCElemLeft = BCCElemBase
BCCElemNonLeft = BCCElemBase


BCCElemBase = BCCCharNonRange | SpecialCharClass | UnicodeCharacterClass | BCCRange | BCC
BCCRangeRightable = BCCChar | SpecialCharClass | UnicodeCharacterClass | '&'
BCCRange = BCCChar <'-'> BCCChar
BCCRangeWithBracket = <']-'> BCCChar
BCCCharNonRange = BCCChar ! ('-' BCCRangeRightable)
BCCChar = BCCPlainChar | EscapedChar | BCCOddAmpersands
BCCPlainChar = #"[^\]\[&\\]"
(* only match an odd number of ampersands whatever *)
(* This is problematic because re-pattern won't take repeated ampersands in the HardLeft position *)
BCCDash = '-'


(** BASE CHARACTER STUFFS **)

EscapedChar = OctalChar | HexChar | BasicEscapedChar | NormalSlashedCharacters | ControlChar | WhatDoesThisMean
OctalChar = <'\\0'> (OctalDigits1 | OctalDigits2 | OctalDigits3)
OctalDigits1 = #"[0-7]" ! #"[0-7]"
OctalDigits2 = (#"[0-3][0-7]" ! #"[0-7]") | #"[4-7][0-7]"
OctalDigits3 = #"[0-3][0-7]{2}"
HexChar = ShortHexChar | MediumHexChar | LongHexChar
ShortHexChar = <'\\x'> #'[0-9a-fA-F]{2}'
MediumHexChar = <'\\u'> #'[0-9a-fA-F]{4}'
LongHexChar = <'\\x{'> #'[0-9a-fA-F]+' <'}'>
BasicEscapedChar = <'\\'> #"[^a-zA-Z0-9]"

(* probably missing something here *)
SpecialCharClass = #"\\[wWsSdD]"
(* Gotta figure out what these mean *)
UnicodeCharacterClass = <'\\'> #'[pP]' (#"[CLMNPSZ]" | #"\{[a-zA-Z]+\}")

NormalSlashedCharacters = #"\\[tnrfae]"
WhatDoesThisMean = '\\v'
(* What are these? *)
ControlChar = #"(?s)\\c."

(** FLAGS **)
GroupFlags = NamedCapturingGroup
           | MutatingMatchFlags
           | NonCapturingMatchFlags
           | PositiveLookAheadFlag
           | NegativeLookAheadFlag
           | PositiveLookBehindFlag
           | PositiveLookBehindFlag
           | IndependentNonCapturingFlag

NamedCapturingGroup = <'?<'> GroupName <'>'>
MutatingMatchFlags = <'?'> MatchFlagsExpr & ')'
NonCapturingMatchFlags = <'?'> !')' MatchFlagsExpr <':'>
PositiveLookAheadFlag = <'?='>
NegativeLookAheadFlag = <'?!'>
PositiveLookBehindFlag = <'?<='>
PositiveLookBehindFlag = <'?<!'>
IndependentNonCapturingFlag = <'?>'>
MatchFlagsExpr = #"[idmsuxU]" * ('-' #"[idmsuxU]" *) ?

GroupName = #"[a-zA-Z][a-zA-Z0-9]*"