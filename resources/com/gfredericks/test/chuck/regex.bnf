(* I think we need a special AlternationWithAllowedQ *)
Regex = AlternationWithAllowedQ

AlternationWithAllowedQ = Concatenation ('|' Concatenation) * PartialQE ?

Alternation = Concatenation ('|' Concatenation) *

Concatenation = SuffixedExpr *

SuffixedExpr = SingleExpr Suffix ?
SingleExpr = BaseExpr | CurlyRepetition | '(' Alternation ')'
Suffix = ('?' | '+' | '*' | CurlyRepetition ) Quantifier ?
CurlyRepetition = <'{'> #"\d+" (',' #"\d+" ?) ? <'}'>
Quantifier = '?' | '+'
BaseExpr = CharExpr | LiteralChar | Anchor | BackReference
Anchor = '^' | '$' | '\\' #"[bBAGZz]"
LiteralChar = PlainChar | CharClassLiteral | BasicEscapedChar | ControlChar

(* this will be hard -- will require counting in the analyzer to figure
   out where the number stops and numberic literals begin *)
BackReference = <'\\'> #"[1-9][0-9]*"

CharClassLiteral = #"\\[tnrfae]" | WhatDoesThisMean
WhatDoesThisMean = '\\v'

(* What are these? *)
ControlChar = #"\\c."

PlainChar = #"[^.|\\+*$^\[(){?]"
CharExpr = Dot | SpecialCharClass | UnicodeCharacterClass | BCC
Dot = '.'

PartialQE = '\\Q' AnyCharButSlashE *
QE = '\\Q' AnyCharButSlashE * '\\E'
AnyCharButSlashE = #"[^\\]" | #"\\[^E]"

(** BRACKETED CHARACTER CLASSES (AKA BCC) **)
(** (which are more complicated than you thought they were) **)

(* TODO: double-check the negation vs intersection precedence *)
BCC = '[' BCCNegation ? BCCIntersection ']'
BCCNegation = '^'
BCCIntersection = BCCInitialElement BCCSubsequentElement * ('&&' + BCCSubsequentElement +) *
BCCInitialElement = ']' | '-' | BCCSubsequentElementBase
BCCSubsequentElement = BCCSubsequentElementBase | '^'
BCCSubsequentElementBase = BCCChar | SpecialCharClass | UnicodeCharacterClass | BCCRange | BCC
BCCRange = BCCChar <'-'> BCCChar
BCCChar = BCCPlainChar | BasicEscapedChar | BCCAmpersand | BCCDash
BCCPlainChar = #"[^-\]\[&\\]"
(* only match an odd number of ampersands whatever *)
BCCAmpersand = '&' ('&&' *) !'&'
BCCDash = '-' !BCCChar


(** BASE CHARACTER STUFFS **)

OctalChar = '\\0' (OctalDigits1 | OctalDigits2 | OctalDigits3)
OctalDigits1 = #"[0-7]" ! #"[0-7]"
OctalDigits2 = (#"[0-3][0-7]" ! #"[0-7]") | #"[4-7][0-7]"
OctalDigits3 = #"[0-3][0-7]{2}"
BasicEscapedChar = '\\' (#"[^a-zA-Z0-9]" | CharThatRegexNegationDoesntCatch)
CharThatRegexNegationDoesntCatch = #"[\u0000\u000A]"

(* probably missing something here *)
SpecialCharClass = #"\\[wWsSdD]"
(* Gotta figure out what these mean *)
UnicodeCharacterClass = #"\\p[CLMNPSZ]"
